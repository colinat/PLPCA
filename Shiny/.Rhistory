dat = data.frame (x=c(1,2), y=c(3,4), z=c(5,6))
apply(dat[,c['x','y'],1,function(x) sum(x))
apply(dat[,c('x','y')],1,function(x) sum(x))
apply(dat[,c('x','y')],1,function(x) sum(x))
dat = data.frame(x=c(1,2),y=c(3,4),z=c(5,6))
apply(dat[,c('x','y')],1,function(x) sum(x))
apply(dat[,c('x','z')],1,function(x) sum(x))
pacman::p_load(tidyverse, FRACTION,lubridate)
pacman::p_load(tidyverse, FRACTION,lubridate)
setwd("C:/Users/colin/Desktop/workshop-data")
# pay attention to the '/'
setwd("C:/Users/isspcs/Desktop/workshop-data")
# setting up the infrastructure
# uncomment run the code below only if you do not have 'pacman' installed
install.packages('pacman', repos = "http://cran.us.r-project.org")
# pay attention to the '/'
setwd("C:/Users/Colin/Desktop/workshop-data")
# pacman installs the ones we do not have in our system
# loads all the required ones later
pacman::p_load(tidyverse, caret, corrplot, caTools, FRACTION,
lubridate,IRdisplay)
# setting up the infrastructure
# uncomment run the code below only if you do not have 'pacman' installed
install.packages('pacman', repos = "http://cran.us.r-project.org")
install.packages("tidyverse")
library(tidyverse)
library(maps)
library(nycflights13)
ggplot(data = diamonds) +
geom_bar(aes(x = cut))
diamonds %>%
count(cuts)
diamonds %>%
count(cut)
ggplot(data = diamonds) +
geom_bar(aes(x = carat))
ggplot(data = diamonds) +
geom_histogram(aes(x = carat), binwidth = 0.5)
diamonds %>%
count(cut_width(carat, 0.5))
smaller <- diamonds %>%
filter(carat <3)
ggplot(data = smaller, aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, aes(x = carat, color = cut)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = diamonds) +
geom_histogram(aes(x = carat), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(aes(x = y), binwidth = 0.1)
ggplot(diamonds) +
geom_histogram(aes(x = y), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0,50))
# Visualising distributions
diamonds
unusual <- diamonds %>%
filter(y < 3 | y > 20) %>%
arrange()
unusual
##test out
ggplot(diamonds) +
geom_histogram(aes(x = y), bindwidth = 0.5)
##test out
ggplot(diamonds) +
geom_histogram(aes(x = y), binwidth = 0.5)
##test out
ggplot(diamonds) +
geom_histogram(aes(x = y), binwidth = 0.1)
##test out
ggplot(diamonds) +
geom_histogram(aes(x = x), binwidth = 0.1)
##test out
ggplot(diamonds) +
geom_histogram(aes(x = x), binwidth = 0.5)
##test out
ggplot(diamonds) +
geom_histogram(aes(x = x), binwidth = 0.1)
##test out
ggplot(diamonds) +
geom_histogram(aes(x = x), binwidth = 0.1) +
coord_cartesian(ylim = c(0,100))
##test out
ggplot(diamonds) +
geom_histogram(aes(x = x), binwidth = 0.1) +
coord_cartesian(ylim = c(0,50))
##test out
ggplot(diamonds) +
geom_histogram(aes(x = z), binwidth = 0.1)
##test out
ggplot(diamonds) +
geom_histogram(aes(x = z), binwidth = 0.1) +
coord_cartesian(ylim = c(0,100))
## deal with unusual values
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y >20, NA, y))
ggplot(data = diamonds2, aes(x = x, y = y)) +
geom_point()
ggplot(data = diamonds2, aes(x = x, y = y)) +
geom_point(na.rm = T)
flights %>%
mutate(cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(aes(sched_dep_time)) +
geom_freqpoly(
aes(color = cancelled),
binwidth = 1/4
)
# covariation
ggplot(data = smaller, aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
# covariation
ggplot(data = smaller, aes(x = price)) +
geom_freqpoly(aes(color = cut), binwidth = 500)
# covariation
ggplot(data = smaller, aes(x = price, y = ..density..)) +
geom_freqpoly(aes(color = cut), binwidth = 500)
# covariation
ggplot(data = diamonds, aes(x = price, y = ..density..)) +
geom_freqpoly(aes(color = cut), binwidth = 500)
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot()
ggplot(mpg, aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(mpg, aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(mpg, aes(x = class, y = hwy)) +
geom_boxplot(aes(x = reorder(class, hwy, FUN = median)),
y = hwy
)
ggplot(mpg, aes(x = class, y = hwy)) +
geom_boxplot(
aes(
x = reorder(class, hwy, FUN = median),
y = hwy
)
)
ggplot(mpg, aes(x = class, y = hwy)) +
geom_boxplot(
aes(
x = reorder(class, hwy, FUN = median),
y = hwy
)
) + coord_flip()
diamonds %>%
count(color, cut) %>%
ggplot(aes(x = color, y = cut)) +
geom_tile(aes(fill = n))
count(color, cut) %>%
ggplot(aes(x = cut, y = color)) +
geom_tile(aes(fill = n))
count(color, cut) %>%
ggplot(aes(x = cut, y = color)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color, cut) %>%
ggplot(aes(x = cut, y = color)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color, cut) %>%
ggplot(aes(x = color, y = cut)) +
geom_tile(aes(fill = n))
alpha = 1/100
ggplot(diamonds) +
geom_point(
aes(x = carat, y = price),
alpha = 1/100
)
install.packages("hexbin")
ggplot(data = smaller) +
geom_bin2d(aes(x = carat, y = price))
ggplot(diamonds) +
geom_point(
aes(x = carat, y = price),
alpha = 1/100
)
ggplot(data = smaller) +
geom_point(
aes(x = carat, y = price),
alpha = 1/100
)
ggplot(data = smaller) +
geom_bin2d(aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(aes(x = carat, y = price))
ggplot(data = smaller, aes(x = carat, y = price)) +
geom_boxplot(aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, aes(x = carat, y = price)) +
geom_boxplot()
ggplot(data = smaller, aes(x = carat, y = price)) +
geom_boxplot(aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, aes(x = carat, y = price)) +
geom_boxplot(aes(group = cut_number(carat, 20)))
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting))
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(diamonds2) +
geom_point(aes(x = carat, y = resid))
View(diamonds2)
View(diamonds2)
View(mod)
View(mod)
ggplot(diamonds2) +
geom_boxplot(aes(x = cut, y = resid))
getwd()
getwd()
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1,9,3.14)
?
?c
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
library(shiny); source('GitHub/PLPCA/Shiny/Activate.R')
